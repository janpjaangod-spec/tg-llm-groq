from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import json
import time
from typing import List

from bot_groq.config.settings import settings
from bot_groq.services.database import (
    db_get_chat_tail, db_clear_history, db_get_group_stats,
    db_load_person, db_save_person, db_get_all_groups
)
from bot_groq.core.profiles import get_user_profile_for_display
from bot_groq.core.relations import analyze_group_dynamics, get_group_tension_points

router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ admin_ids –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–º–Ω–æ–∂–µ—Å—Ç–≤–æ int)
    return user_id in settings.admin_ids

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not is_admin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        stats = db_get_group_stats(message.chat.id)
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        dynamics = analyze_group_dynamics(message.chat.id, limit=200)
        
        # –¢–æ—á–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
        tensions = get_group_tension_points(message.chat.id)
        
        text_parts = [
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>",
            f"",
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}",
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {dynamics.get('active_users', 0)}",
            f"üìà –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {dynamics.get('avg_activity', 0):.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        ]
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if dynamics.get('most_active'):
            text_parts.append(f"\nüèÜ <b>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:</b>")
            for i, (user_id, count) in enumerate(dynamics['most_active'][:5], 1):
                try:
                    member = await message.bot.get_chat_member(message.chat.id, user_id)
                    name = member.user.first_name or f"User_{user_id}"
                    text_parts.append(f"{i}. {name}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                except:
                    text_parts.append(f"{i}. User_{user_id}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ú–æ–ª—á—É–Ω—ã
        if dynamics.get('silent_users'):
            text_parts.append(f"\nüò∂ –ú–æ–ª—á—É–Ω–æ–≤: {len(dynamics['silent_users'])}")
        
        # –¢–æ—á–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
        if tensions:
            text_parts.append(f"\n‚ö†Ô∏è <b>–¢–æ—á–∫–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:</b>")
            for tension in tensions[:3]:
                text_parts.append(f"‚Ä¢ {tension}")
        
        await message.reply("\n".join(text_parts), parse_mode="HTML")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(Command("who"))
async def cmd_who(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not is_admin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        target_user = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
        else:
            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
            if message.entities:
                for entity in message.entities:
                    if entity.type == "mention":
                        username = message.text[entity.offset+1:entity.offset+entity.length]
                        try:
                            chat_member = await message.bot.get_chat_member(
                                message.chat.id, 
                                f"@{username}"
                            )
                            target_user = chat_member.user
                            break
                        except:
                            continue
        
        if not target_user:
            await message.reply("‚ùì –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = get_user_profile_for_display(
            message.chat.id, 
            target_user.id, 
            target_user
        )
        
        text_parts = [
            f"üë§ <b>–î–æ—Å—å–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
            f"",
            f"üìù –ò–º—è: {profile['name']}",
            f"üí¨ –û–±—Ä–∞—â–∞–µ—Ç—Å—è: {profile['call']}",
            f"‚ù§Ô∏è –õ—é–±–∏—Ç: {profile['likes']}",
            f"üíî –ù–µ –ª—é–±–∏—Ç: {profile['dislikes']}",
            f"üé≠ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {profile['tone']}",
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Å—ã—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        raw_profile = db_load_person(message.chat.id, target_user.id)
        if raw_profile:
            if raw_profile.get('spice', 0) > 1:
                text_parts.append(f"üå∂Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {raw_profile['spice']}/3")
            
            if raw_profile.get('notes'):
                text_parts.append(f"üìã –ó–∞–º–µ—Ç–∫–∏: {'; '.join(raw_profile['notes'][-3:])}")
        
        await message.reply("\n".join(text_parts), parse_mode="HTML")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")

@router.message(Command("clear_history"))
async def cmd_clear_history(message: Message):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)."""
    # –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ admin_ids
    primary_admin = next(iter(sorted(settings.admin_ids))) if settings.admin_ids else None
    if message.from_user.id != primary_admin:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        current_count = len(db_get_chat_tail(message.chat.id, limit=10000))
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        db_clear_history(message.chat.id)
        
        await message.reply(
            f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {current_count}"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@router.message(Command("export_data"))
async def cmd_export_data(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)."""
    primary_admin = next(iter(sorted(settings.admin_ids))) if settings.admin_ids else None
    if message.from_user.id != primary_admin:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "chat_id": message.chat.id,
            "export_time": time.time(),
            "messages": db_get_chat_tail(message.chat.id, limit=1000),
            "stats": db_get_group_stats(message.chat.id),
            "dynamics": analyze_group_dynamics(message.chat.id),
            "tensions": get_group_tension_points(message.chat.id)
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        json_data = json.dumps(export_data, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        filename = f"chat_export_{message.chat.id}_{int(time.time())}.json"
        
        await message.reply_document(
            document=json_data.encode('utf-8'),
            filename=filename,
            caption="üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.message(Command("global_stats"))
async def cmd_global_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)."""
    primary_admin = next(iter(sorted(settings.admin_ids))) if settings.admin_ids else None
    if message.from_user.id != primary_admin:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = db_get_all_groups()
        
        total_messages = 0
        total_users = 0
        active_groups = 0
        
        group_details = []
        
        for group_data in groups:
            chat_id = group_data.get('chat_id')
            if not chat_id:
                continue
                
            stats = db_get_group_stats(chat_id)
            dynamics = analyze_group_dynamics(chat_id, limit=100)
            
            messages = stats.get('total_messages', 0)
            users = dynamics.get('active_users', 0)
            
            total_messages += messages
            total_users += users
            
            if messages > 10:  # —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä—É–ø–ø—ã —Å >10 —Å–æ–æ–±—â–µ–Ω–∏–π
                active_groups += 1
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            try:
                chat = await message.bot.get_chat(chat_id)
                chat_name = chat.title or f"Chat {chat_id}"
            except:
                chat_name = f"Chat {chat_id}"
                
            group_details.append({
                'name': chat_name,
                'messages': messages,
                'users': users
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        group_details.sort(key=lambda x: x['messages'], reverse=True)
        
        text_parts = [
            f"üåç <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
            f"",
            f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}",
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {active_groups}",  
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
        ]
        
        if group_details:
            text_parts.append(f"\nüèÜ <b>–¢–æ–ø –≥—Ä—É–ø–ø –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>")
            for i, group in enumerate(group_details[:5], 1):
                text_parts.append(
                    f"{i}. {group['name']}: {group['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                    f"{group['users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
        
        await message.reply("\n".join(text_parts), parse_mode="HTML")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.message(Command("set_mode"))
async def cmd_set_mode(message: Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not is_admin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if not args:
            await message.reply(
                "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
                "/set_mode toxic - —Ç–æ–∫—Å–∏—á–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "/set_mode friendly - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "/set_mode neutral - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "/set_mode silent - —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º (–Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)"
            )
            return
        
        mode = args[0].lower()
        valid_modes = ["toxic", "friendly", "neutral", "silent"]
        
        if mode not in valid_modes:
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_modes)}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)
        system_profile = db_load_person(message.chat.id, 0) or {}
        system_profile["bot_mode"] = mode
        db_save_person(message.chat.id, 0, system_profile)
        
        mode_names = {
            "toxic": "üî• –¢–æ–∫—Å–∏—á–Ω—ã–π",
            "friendly": "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", 
            "neutral": "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
            "silent": "ü§ê –¢–∏—Ö–∏–π"
        }
        
        await message.reply(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_names[mode]}")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}")

@router.message(Command("debug"))
async def cmd_debug(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)."""
    primary_admin = next(iter(sorted(settings.admin_ids))) if settings.admin_ids else None
    if message.from_user.id != primary_admin:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        import sys
        import psutil
        import os
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        process = psutil.Process(os.getpid())
        memory_info = process.memory_info()
        
        text_parts = [
            f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>",
            f"",
            f"üêç Python: {sys.version.split()[0]}",
            f"üíæ –ü–∞–º—è—Ç—å: {memory_info.rss / 1024 / 1024:.1f} MB",
            f"‚ö° CPU: {process.cpu_percent():.1f}%",
            f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(time.time() - process.create_time())} —Å–µ–∫",
            f"",
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            f"‚Ä¢ Admin IDs: {len(settings.admin_ids)}",
            f"‚Ä¢ Name keywords: {len(settings.name_keywords_list)}",
            f"‚Ä¢ Groq model: {settings.groq_model}",
            f"‚Ä¢ Response chance: {settings.response_chance}%"
        ]
        
        await message.reply("\n".join(text_parts), parse_mode="HTML")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
