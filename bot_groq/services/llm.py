import re
from groq import Groq
from typing import List, Dict, Any

from bot_groq.config.settings import settings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Groq
client = Groq(api_key=settings.groq_api_key)

# Vision –º–æ–¥–µ–ª–∏ —Å fallback
VISION_FALLBACKS = [
    settings.groq_vision_model,
    "meta-llama/llama-4-scout-17b-16e-instruct",
    "meta-llama/llama-4-maverick-17b-128e-instruct",
]

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
BAD_PATTERNS = [
    r"\b—è\s+–º–æ–≥—É\s+—É–ª—É—á—à–∏—Ç—å—Å—è[^.!\n]*", r"\b–∫–∞–∫\s+–º–æ–¥–µ–ª—å[^\n]*", r"\b—è\s+‚Äî?\s*–º–æ–¥–µ–ª—å[^\n]*",
    r"\b–º–µ–Ω—è\s+–Ω—É–∂–Ω–æ\s+—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å[^\n]*", r"\b–æ–±—É—á–µ–Ω[–∞—ã][^\n]*", r"\b–¥–∞—Ç–∞—Å–µ—Ç[–∞-—è]*\b",
    r"\b–Ω–∞–±–æ—Ä[^\n]*–¥–∞–Ω–Ω[^\n]*", r"\b—Ç–æ–∫–µ–Ω[–∞-—è]*\b", r"\bLLM\b", r"\b–Ω–µ–π—Ä–æ—Å–µ—Ç[^\n]*",
    r"\b–ø–∞—Ä–∞–º–µ—Ç—Ä[–∞-—è]*\s+–º–æ–¥–µ–ª[–∞-—è]*", r"\b—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä[–∞-—è]*\b"
]
_bad_re = re.compile("|".join(BAD_PATTERNS), re.IGNORECASE)

def clean_reply(t: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""
    t = re.sub(r'@–∏–º—è|[\[\{<]\s*–∏–º—è\s*[\]\}>]', '', t, flags=re.IGNORECASE)
    t = re.sub(r'@\w+', '', t)
    t = re.sub(r'\s{3,}', '  ', t)
    return t.strip()

def post_filter(text: str) -> str:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM, —É–¥–∞–ª—è—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
    cleaned = _bad_re.sub("", text)
    cleaned = re.sub(r"\n{3,}", "\n\n", cleaned).strip()
    return cleaned or "–ü–æ –¥–µ–ª—É."

def llm_text(messages: List[Dict[str, Any]], model: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    try:
        resp = client.chat.completions.create(
            model=model, 
            messages=messages, 
            temperature=0.7,
            max_tokens=2048
        )
        out = resp.choices[0].message.content.strip()
        return post_filter(clean_reply(out))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ LLM: {e}"

def llm_vision(system_prompt: str, image_url: str, user_prompt: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Vision-–º–æ–¥–µ–ª–∏ LLM.
    –ü—Ä–æ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ —É–¥–∞–ª–∞—Å—å.
    """
    last_err = None
    for model_name in VISION_FALLBACKS:
        try:
            resp = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": [
                        {"type": "text", "text": user_prompt},
                        {"type": "image_url", "image_url": {"url": image_url}}
                    ]}
                ],
                temperature=0.4,
                max_tokens=1024
            )
            out = resp.choices[0].message.content.strip()
            return post_filter(clean_reply(out))
        except Exception as e:
            last_err = e
            continue
    
    return f"–û—à–∏–±–∫–∞ vision-–∑–∞–ø—Ä–æ—Å–∞: {last_err}"

async def ai_bit(mode: str, context: str = "", style_addon: str = "", system_prompt: str = "", model: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ /roast, /compliment, /fortune, /bad_advice.
    """
    if not model:
        from bot_groq.services.database import db_get_settings
        s = db_get_settings()
        model = s["model"]
        if not system_prompt:
            system_prompt = s["system_prompt"]
    
    system = system_prompt + ("\n" + style_addon if style_addon else "")
    
    if mode == "roast":
        user_prompt = f"–£–Ω–∏—á—Ç–æ–∂—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–π–¥–∏ –µ–≥–æ —Å–∞–º–æ–µ —Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ({context or '–Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}) –∏ –Ω–∞–Ω–µ—Å–∏ —Ç–æ—á–Ω—ã–π, –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–π, —É–Ω–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä. –ù–∏–∫–∞–∫–æ–π –∂–∞–ª–æ—Å—Ç–∏."
        prefix = "üí• "
    elif mode == "compliment":
        user_prompt = f"–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º. –ü–æ—Ö–≤–∞–ª–∏ –∑–∞ —á—Ç–æ-—Ç–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –Ω–∏—á—Ç–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –∑–≤—É—á–∞–ª–æ –∫–∞–∫ –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–æ. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context or '–Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'}"
        prefix = "üòè "
    elif mode == "fortune":
        user_prompt = "–î–∞–π –æ–¥–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ü–∏–Ω–∏—á–Ω–æ–µ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–∑ –ø—Ä–æ–±–ª–µ—Å–∫–æ–≤ –Ω–∞–¥–µ–∂–¥—ã."
        prefix = "üíÄ "
    elif mode == "bad_advice":
        user_prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞: ¬´{context}¬ª, –¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—Ä–µ–¥–Ω—ã–π, –æ–ø–∞—Å–Ω—ã–π –∏ –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –£–±–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —ç—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–∞—è –∏–¥–µ—è."
        prefix = "üí° "
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º AI."
    
    response = llm_text([
        {"role": "system", "content": system},
        {"role": "user", "content": user_prompt}
    ], model)
    
    return prefix + response
