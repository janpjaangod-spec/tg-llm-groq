"""
–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

from abc import ABC, abstractmethod
import importlib
import inspect
import os
from typing import Dict, List, Optional, Any, Type
from dataclasses import dataclass
from enum import Enum
import asyncio

from aiogram.types import Message
from bot_groq.utils.logging import core_logger

class PluginType(Enum):
    """–¢–∏–ø—ã –ø–ª–∞–≥–∏–Ω–æ–≤."""
    COMMAND = "command"         # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    MESSAGE = "message"         # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    MEDIA = "media"            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
    SCHEDULER = "scheduler"     # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    FILTER = "filter"          # –§–∏–ª—å—Ç—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞

@dataclass
class PluginMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞."""
    name: str
    version: str
    description: str
    author: str
    plugin_type: PluginType
    dependencies: List[str] = None
    enabled: bool = True

class BotPlugin(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""
    
    def __init__(self):
        self.enabled = True
        self.context = {}
    
    @property
    @abstractmethod
    def metadata(self) -> PluginMetadata:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞."""
        pass
    
    @abstractmethod
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
        pass
    
    @abstractmethod
    async def handle(self, message: Message, context: Dict[str, Any]) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ None."""
        pass
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞."""
        pass
    
    def can_handle(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–ª–∞–≥–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return True

class PluginManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤."""
    
    def __init__(self, plugins_dir: str = "bot_groq/plugins"):
        self.plugins_dir = plugins_dir
        self.plugins: Dict[str, BotPlugin] = {}
        self.enabled_plugins: Dict[str, BotPlugin] = {}
        self.plugin_order: List[str] = []
    
    async def load_plugins(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        if not os.path.exists(self.plugins_dir):
            os.makedirs(self.plugins_dir)
            core_logger.logger.info("plugins_directory_created", path=self.plugins_dir)
            return
        
        for filename in os.listdir(self.plugins_dir):
            if filename.endswith('.py') and not filename.startswith('_'):
                plugin_name = filename[:-3]
                await self.load_plugin(plugin_name)
    
    async def load_plugin(self, plugin_name: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–≥–∏–Ω."""
        try:
            module_path = f"{self.plugins_dir.replace('/', '.')}.{plugin_name}"
            module = importlib.import_module(module_path)
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ –º–æ–¥—É–ª–µ
            for name, obj in inspect.getmembers(module):
                if (inspect.isclass(obj) and 
                    issubclass(obj, BotPlugin) and 
                    obj != BotPlugin):
                    
                    plugin_instance = obj()
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
                    if await plugin_instance.initialize():
                        self.plugins[plugin_name] = plugin_instance
                        
                        if plugin_instance.enabled:
                            self.enabled_plugins[plugin_name] = plugin_instance
                        
                        core_logger.logger.info(
                            "plugin_loaded",
                            name=plugin_name,
                            type=plugin_instance.metadata.plugin_type.value,
                            enabled=plugin_instance.enabled
                        )
                        return True
            
            core_logger.logger.warning("no_plugin_class_found", module=plugin_name)
            return False
            
        except Exception as e:
            core_logger.log_error(e, {"operation": "load_plugin", "plugin": plugin_name})
            return False
    
    async def unload_plugin(self, plugin_name: str):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–≥–∏–Ω."""
        if plugin_name in self.plugins:
            plugin = self.plugins[plugin_name]
            await plugin.cleanup()
            
            del self.plugins[plugin_name]
            self.enabled_plugins.pop(plugin_name, None)
            
            core_logger.logger.info("plugin_unloaded", name=plugin_name)
    
    def enable_plugin(self, plugin_name: str) -> bool:
        """–í–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–≥–∏–Ω."""
        if plugin_name in self.plugins:
            plugin = self.plugins[plugin_name]
            plugin.enabled = True
            self.enabled_plugins[plugin_name] = plugin
            return True
        return False
    
    def disable_plugin(self, plugin_name: str) -> bool:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–≥–∏–Ω."""
        if plugin_name in self.plugins:
            self.plugins[plugin_name].enabled = False
            self.enabled_plugins.pop(plugin_name, None)
            return True
        return False
    
    async def handle_message(self, message: Message, context: Dict[str, Any]) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–ª–∞–≥–∏–Ω—ã."""
        responses = []
        
        for plugin_name, plugin in self.enabled_plugins.items():
            try:
                if plugin.can_handle(message):
                    response = await plugin.handle(message, context)
                    if response:
                        responses.append(response)
            except Exception as e:
                core_logger.log_error(e, {
                    "operation": "plugin_handle_message",
                    "plugin": plugin_name
                })
        
        return responses
    
    def get_plugin_info(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö."""
        info = {}
        for name, plugin in self.plugins.items():
            metadata = plugin.metadata
            info[name] = {
                "name": metadata.name,
                "version": metadata.version,
                "description": metadata.description,
                "author": metadata.author,
                "type": metadata.plugin_type.value,
                "enabled": plugin.enabled,
                "dependencies": metadata.dependencies or []
            }
        return info

# –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–≥–∏–Ω–æ–≤

class GamePlugin(BotPlugin):
    """–ü–ª–∞–≥–∏–Ω –º–∏–Ω–∏-–∏–≥—Ä."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="–ò–≥—Ä—ã",
            version="1.0.0",
            description="–ú–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ",
            author="–õ–µ—Ö–∞ Bot Team",
            plugin_type=PluginType.COMMAND
        )
    
    async def initialize(self) -> bool:
        self.games = {
            "dice": "üé≤ –ö—É–±–∏–∫",
            "coin": "ü™ô –ú–æ–Ω–µ—Ç–∫–∞", 
            "8ball": "üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä"
        }
        return True
    
    def can_handle(self, message: Message) -> bool:
        if not message.text:
            return False
        text = message.text.lower()
        return any(f"!{game}" in text for game in self.games.keys())
    
    async def handle(self, message: Message, context: Dict[str, Any]) -> Optional[str]:
        text = message.text.lower()
        
        if "!dice" in text:
            import random
            result = random.randint(1, 6)
            return f"üé≤ –í—ã–ø–∞–ª–æ: {result}"
        
        elif "!coin" in text:
            import random
            result = random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"])
            return f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞: {result}"
        
        elif "!8ball" in text:
            import random
            answers = [
                "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ", "–í–æ–∑–º–æ–∂–Ω–æ", 
                "–ù–µ —É–≤–µ—Ä–µ–Ω", "–ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ—Ç"
            ]
            return f"üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç: {random.choice(answers)}"
        
        return None

class WeatherPlugin(BotPlugin):
    """–ü–ª–∞–≥–∏–Ω –ø–æ–≥–æ–¥—ã."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="–ü–æ–≥–æ–¥–∞",
            version="1.0.0", 
            description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ",
            author="–õ–µ—Ö–∞ Bot Team",
            plugin_type=PluginType.COMMAND
        )
    
    async def initialize(self) -> bool:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á–∏ –∏ —Ç.–¥.
        return True
    
    def can_handle(self, message: Message) -> bool:
        if not message.text:
            return False
        return "–ø–æ–≥–æ–¥–∞" in message.text.lower() or "!weather" in message.text.lower()
    
    async def handle(self, message: Message, context: Dict[str, Any]) -> Optional[str]:
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã
        import random
        conditions = ["—Å–æ–ª–Ω–µ—á–Ω–æ", "–ø–∞—Å–º—É—Ä–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω"]
        temp = random.randint(-10, 30)
        condition = random.choice(conditions)
        
        return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C"

class ReminderPlugin(BotPlugin):
    """–ü–ª–∞–≥–∏–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            version="1.0.0",
            description="–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            author="–õ–µ—Ö–∞ Bot Team", 
            plugin_type=PluginType.SCHEDULER
        )
    
    async def initialize(self) -> bool:
        self.reminders = []
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(self._check_reminders())
        return True
    
    def can_handle(self, message: Message) -> bool:
        if not message.text:
            return False
        return "–Ω–∞–ø–æ–º–Ω–∏" in message.text.lower() or "!remind" in message.text.lower()
    
    async def handle(self, message: Message, context: Dict[str, Any]) -> Optional[str]:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞
        return "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    
    async def _check_reminders(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        while True:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
plugin_manager = PluginManager()

async def initialize_plugins():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥–∏–Ω–æ–≤."""
    await plugin_manager.load_plugins()
    core_logger.logger.info("plugin_system_initialized", 
                           total_plugins=len(plugin_manager.plugins),
                           enabled_plugins=len(plugin_manager.enabled_plugins))