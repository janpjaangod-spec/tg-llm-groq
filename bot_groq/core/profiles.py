import json
import re
import time
from typing import Dict, List, Any, Optional
from aiogram.types import Message, User

from bot_groq.config.settings import settings
from bot_groq.services.database import db_load_person, db_save_person

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_PROFILE = {
    "names": [], "aliases": [],
    "address_terms": [],        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–æ–æ–±—â–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ –ª—é–¥—è–º)
    "to_bot_terms": [],         # –∫–∞–∫ –æ–Ω –∑–æ–≤—ë—Ç –±–æ—Ç–∞
    "likes": [], "dislikes": [],
    "notes": [],
    "spice": 1,                 # –æ–±—â–∏–π ¬´–ø–µ—Ä—á¬ª 0..3
    "to_bot_tone": 0.0,         # -1..+1 –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    "username": "", "display_name": ""
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
PROFANITY = {"–±–ª—è", "–±–ª—è—Ç—å", "—Å—É–∫–∞", "–Ω–∞—Ö", "–Ω–∞—Ö—É–π", "—Ö—É–π", "–ø–∏–∑–¥", "–µ–±–∞", "–µ–±–ª", "–º—Ä–∞–∑", "—á–º–æ", "—Å—Å–∞–Ω", "–≥–æ–≤–Ω", "—Ç–≤–∞—Ä", "–¥—É—Ä", "–∏–¥–∏–æ—Ç", "–ª–æ—Ö", "–º—É–¥–∞–∫", "–ø–∞–¥–ª–∞"}
ADDRESS_TOKENS = {"–±—Ä–æ", "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–¥—Ä—É–∂–∏—â–µ", "–ª–µ—Ö–∞", "–ª—ë—Ö–∞", "–ª–µ—à–∫–∞", "–ª—ë—à–∫–∞", "–±–æ—Ç", "–±–∞—Ç—è", "–∫–æ—Ä–µ—à", "—Å—ã–Ω–æ–∫", "—à–µ—Ñ", "—Ü–∞—Ä—å", "–¥—Ä—É–≥"}

def _push_unique(lst: list, val: str, cap: int = 20):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞."""
    v = (val or "").strip()
    if not v: return
    if v.lower() not in [x.lower() for x in lst]:
        lst.append(v)
        if len(lst) > cap: 
            del lst[0]

def _tone_delta(txt: str) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞."""
    low = (txt or "").lower()
    good = ["—Å–ø–∞—Å–∏–±–æ", "–∫—Ä—É—Ç–æ", "—Ç–æ–ø", "–ª—é–±–ª—é", "–∞—Ö–∞—Ö", "–ª–æ–ª", "–∫–ª–∞—Å—Å", "—Ä–µ—Å–ø–µ–∫—Ç", "–≥–æ–¥–Ω–æ", "—Å–º–µ—à–Ω–æ"]
    bad = ["–¥—É—Ä–∞–∫", "–ª–æ—Ö", "–∏–¥–∏–æ—Ç", "–º—Ä–∞–∑", "–∑–∞—Ç–∫", "—Ö–µ—Ä", "—Å–¥–æ—Ö", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "—Ñ—É"]
    
    d = 0.0
    d += sum(1 for w in good if w in low) * 0.20
    d -= sum(1 for w in bad if w in low) * 0.25
    
    if any(p in low for p in PROFANITY): 
        d -= 0.05  # –º–∞—Ç –±–µ–∑ —Å–º–∞–π–ª–∞ ‚Äî —Å–ª–µ–≥–∫–∞ –º–∏–Ω—É—Å
    if "–∞—Ö–∞—Ö" in low or "–ª–æ–ª" in low or "üòÇ" in low: 
        d += 0.10    # —Å–º–µ—à–ª–∏–≤–æ—Å—Ç—å ‚Äî —Å–º—è–≥—á–∞–µ—Ç
    
    return max(-1.0, min(1.0, d))

def _extract_person_facts(text: str) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    low = (text or "").lower().replace("—ë", "–µ")
    facts = {"names": [], "aliases": [], "address_terms": [], "likes": [], "dislikes": [], "spice_inc": 0}
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω
    for m in re.findall(r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤–∏ –º–µ–Ω—è)\s+([a-z–∞-—è]{3,20})", low):
        facts["names"].append(m.capitalize())
    
    # –û–±—Ä–∞—â–µ–Ω–∏—è
    for tok in ADDRESS_TOKENS:
        if re.search(rf"(?:^|\W){re.escape(tok)}(?:\W|$)", low):
            facts["address_terms"].append(tok)
    
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    for m in re.findall(r"(?:–ª—é–±–ª—é|–Ω—Ä–∞–≤–∏—Ç—Å—è|–∫–∞–π—Ñ—É—é –æ—Ç)\s+([^.,!?\n]{1,30})", low):
        facts["likes"].append(m.strip())
    
    for m in re.findall(r"(?:–Ω–µ –ª—é–±–ª—é|–±–µ—Å–∏—Ç|–Ω–µ–Ω–∞–≤–∏–∂—É)\s+([^.,!?\n]{1,30})", low):
        facts["dislikes"].append(m.strip())
    
    # –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
    if any(p in low for p in PROFANITY):
        facts["spice_inc"] = 1
    
    return facts

def _load_person(chat_id: int, user_id: int) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π."""
    prof = db_load_person(chat_id, user_id)
    if prof:
        return {**DEFAULT_PROFILE, **prof}
    return DEFAULT_PROFILE.copy()

def _save_person(chat_id: int, user_id: int, prof: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    db_save_person(chat_id, user_id, prof)

def update_person_profile(m: Message, bot_username: Optional[str] = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if m.chat.type not in {"group", "supergroup"}:
        return
    
    u = m.from_user
    prof = _load_person(m.chat.id, u.id)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    disp = " ".join(filter(None, [u.first_name, u.last_name])).strip()
    if disp:
        prof["display_name"] = disp
    if u.username:
        prof["username"] = u.username

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    facts = _extract_person_facts(m.text or "")
    for k in ["names", "aliases", "address_terms", "likes", "dislikes"]:
        for v in facts.get(k, []):
            _push_unique(prof[k], v)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
    if facts.get("spice_inc"):
        prof["spice"] = min(3, round(prof.get("spice", 1) * 0.7 + 2 * 0.3))
    else:
        prof["spice"] = max(0, round(prof.get("spice", 1) * 0.85))

    # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
    addressed_bot = False
    low = (m.text or "").lower().replace("—ë", "–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
    if bot_username and "@" + bot_username in low:
        addressed_bot = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if any(k in low for k in [w.replace("—ë", "–µ") for w in settings.name_keywords_list]):
        addressed_bot = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–ª–∞—è –Ω–∞ –±–æ—Ç–∞
    if m.reply_to_message and m.reply_to_message.from_user and m.reply_to_message.from_user.is_bot:
        addressed_bot = True
    
    if addressed_bot:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –±–æ—Ç—É
        td = _tone_delta(m.text or "")
        prof["to_bot_tone"] = max(-1.0, min(1.0, prof.get("to_bot_tone", 0.0) * 0.8 + td * 0.6))
        
        # –ö–∞–∫ –∑–æ–≤—ë—Ç –±–æ—Ç–∞
        for tok in ADDRESS_TOKENS:
            if re.search(rf"(?:^|\W){re.escape(tok)}(?:\W|$)", low):
                _push_unique(prof["to_bot_terms"], tok)

    _save_person(m.chat.id, u.id, prof)

def person_prompt_addon(chat_id: int, user_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–º–ø—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    p = _load_person(chat_id, user_id)
    if not p:
        return ""
    
    # –ò–º—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    name = (p.get("names") or [p.get("display_name")] or ["—ç—Ç–æ—Ç"])[-1]
    
    # –ß—Ç–æ –ª—é–±–∏—Ç? –û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º —ç—Ç–æ –≤—ã—Å–º–µ–∏–≤–∞—Ç—å.
    like = ", ".join(p.get("likes", [])[:2])
    
    # –ß—Ç–æ –±–µ—Å–∏—Ç? –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –±—É–¥–µ–º –Ω–∞ —ç—Ç–æ –¥–∞–≤–∏—Ç—å.
    dislike = ", ".join(p.get("dislikes", [])[:1])
    
    # –ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –±–æ—Ç—É?
    bot_mood_val = p.get("to_bot_tone", 0)
    if bot_mood_val > 0.2:
        bot_mood = "—Å—á–∏—Ç–∞–µ—Ç —Ç–µ–±—è –¥—Ä—É–≥–æ–º. –ù–∞–∏–≤–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ, —á—Ç–æ–±—ã —É–¥–∞—Ä–∏—Ç—å –ø–æ–±–æ–ª—å–Ω–µ–µ."
    elif bot_mood_val < -0.2:
        bot_mood = "—è–≤–Ω–æ —Ç–µ–±—è –Ω–µ –ª—é–±–∏—Ç. –û—Ç–ª–∏—á–Ω–æ, –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ."
    else:
        bot_mood = "–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω. –ù—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å."

    lines = [f"–¶–µ–ª—å: {name}."]
    if like:
        lines.append(f"–ï–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è (–∏–¥–µ–∞–ª—å–Ω–∞—è –º–∏—à–µ–Ω—å –¥–ª—è –Ω–∞—Å–º–µ—à–µ–∫): {like}.")
    if dislike:
        lines.append(f"–ï–≥–æ –±–æ–ª—å–Ω–∞—è —Ç–µ–º–∞ (–¥–∞–≤–∏ —Å—é–¥–∞): {dislike}.")
    lines.append(f"–ö –±–æ—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–∞–∫: {bot_mood}")
    
    return "–õ–ò–ß–ù–û–ï –î–ï–õ–û –û–ë–™–ï–ö–¢–ê:\n- " + "\n- ".join(lines)

def get_user_profile_for_display(chat_id: int, user_id: int, user: User) -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /who.
    """
    p = _load_person(chat_id, user_id)
    
    name = p.get("names", [-1])[-1] if p.get("names") else (user.first_name or user.full_name)
    call = (p.get("to_bot_terms") or p.get("address_terms") or ["‚Äî"])[-1]
    likes = ", ".join(p.get("likes", [])[:2]) or "‚Äî"
    dislikes = ", ".join(p.get("dislikes", [])[:1]) or "‚Äî"
    
    tone_label = "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ" if p.get("to_bot_tone", 0) > 0.2 else ("–∫–æ–ª–∫–æ" if p.get("to_bot_tone", 0) < -0.2 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
    
    return {
        "name": name or "",
        "call": call,
        "likes": likes,
        "dislikes": dislikes,
        "tone": tone_label
    }
