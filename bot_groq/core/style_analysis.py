import re
import random
from typing import Dict, List, Any, Optional
from collections import Counter

class StyleAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
        self.formal_indicators = [
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã", "–Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã", "–∏–∑–≤–∏–Ω–∏—Ç–µ", 
            "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º", "–ø–æ–∑–≤–æ–ª—å—Ç–µ", "—Ä–∞–∑—Ä–µ—à–∏—Ç–µ"
        ]
        
        self.casual_indicators = [
            "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É", "–∫–∞–∫ –¥–µ–ª–∞", "—á—ë –∫–∞–∫", "–ø–æ–≥–Ω–∞–ª–∏", 
            "–æ–∫–µ–π", "–ø–æ–∫–∞", "—É–≤–∏–¥–∏–º—Å—è", "–ª–∞–¥—ã"
        ]
        
        self.aggressive_indicators = [
            "—Å—É–∫–∞", "–±–ª—è—Ç—å", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "–Ω–∞—Ö—É–π", "–æ—Ö—É–µ–ª", 
            "–∑–∞—Ç–∫–Ω–∏—Å—å", "–æ—Ç–≤–∞–ª–∏", "–∏–¥–∏ –Ω–∞—Ö–µ—Ä", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π"
        ]
        
        self.ironic_indicators = [
            "–∞–≥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–Ω—É –¥–∞", "–µ—â–µ —á–µ–≥–æ", "—è—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ", 
            "–∫–∞–∫ –∂–µ", "–Ω—É –∫–æ–Ω–µ—á–Ω–æ –∂–µ", "–ø—Ä—è–º —Ç–∞–∫", "–∞–≥–∞ —â–∞—Å"
        ]
        
        self.emotional_indicators = [
            "!!!", "??", "!!!", "–∞—Ö–∞—Ö–∞—Ö", "–æ–ª–æ–ª–æ", "–≤–∞—É", "–æ–≥–æ", 
            "–±–æ–∂–µ", "–∫–∞–ø–µ—Ü", "–ø–∏–∑–¥–µ—Ü", "–æ—Ö—Ä–µ—Ç—å"
        ]
    
    def analyze_message_style(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not text:
            return {}
        
        text_lower = text.lower()
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        formal_score = sum(1 for ind in self.formal_indicators if ind in text_lower)
        casual_score = sum(1 for ind in self.casual_indicators if ind in text_lower)
        aggressive_score = sum(1 for ind in self.aggressive_indicators if ind in text_lower)
        ironic_score = sum(1 for ind in self.ironic_indicators if ind in text_lower)
        emotional_score = sum(1 for ind in self.emotional_indicators if ind in text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        caps_ratio = sum(1 for c in text if c.isupper()) / max(1, len(text))
        exclamation_count = text.count('!')
        question_count = text.count('?')
        emoji_count = len(re.findall(r'[üòÄ-üôè]', text))
        
        return {
            "formal": formal_score,
            "casual": casual_score, 
            "aggressive": aggressive_score,
            "ironic": ironic_score,
            "emotional": emotional_score,
            "caps_ratio": caps_ratio,
            "exclamations": exclamation_count,
            "questions": question_count,
            "emojis": emoji_count,
            "length": len(text),
            "words": len(text.split())
        }
    
    def get_dominant_style(self, style_metrics: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫."""
        styles = {
            "formal": style_metrics.get("formal", 0),
            "casual": style_metrics.get("casual", 0),
            "aggressive": style_metrics.get("aggressive", 0),
            "ironic": style_metrics.get("ironic", 0),
            "emotional": style_metrics.get("emotional", 0)
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if style_metrics.get("caps_ratio", 0) > 0.3:
            styles["aggressive"] += 2
        
        if style_metrics.get("exclamations", 0) > 2:
            styles["emotional"] += 1
        
        if style_metrics.get("emojis", 0) > 0:
            styles["casual"] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
        max_style = max(styles.items(), key=lambda x: x[1])
        
        if max_style[1] == 0:
            return "neutral"
        
        return max_style[0]
    
    def generate_style_adaptation(self, user_style: str, bot_personality: str = "toxic") -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Å—Ç–∏–ª—è –±–æ—Ç–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        adaptations = {
            "formal": {
                "toxic": "–û—Ç–≤–µ—á–∞–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ –≤–µ–∂–ª–∏–≤–æ, –Ω–æ —Å —è–¥–æ–≤–∏—Ç—ã–º –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º. '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Å—Ç–æ–ª—å... –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –º–Ω–µ–Ω–∏–µ.'",
                "friendly": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π '–í—ã', –∏–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞.",
                "neutral": "–£–º–µ—Ä–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –±–µ–∑ –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π."
            },
            "casual": {
                "toxic": "–û—Ç–≤–µ—á–∞–π –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –Ω–æ –¥–æ–±–∞–≤–ª—è–π –∫–æ–ª–∫–æ—Å—Ç–∏. '–ù—É –æ–∫–µ–π, —Ç–æ–ª—å–∫–æ –≤–æ—Ç –ø—Ä–æ–±–ª–µ–º–∞...'",
                "friendly": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏ —ç–º–æ–¥–∑–∏.",
                "neutral": "–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å."
            },
            "aggressive": {
                "toxic": "–û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–π –∞–≥—Ä–µ—Å—Å–∏—é, –Ω–æ —É–º–Ω–µ–µ. –ë–µ–π –ø–æ –±–æ–ª–µ–≤—ã–º —Ç–æ—á–∫–∞–º, –∞ –Ω–µ –º–∞—Ç–æ–º.",
                "friendly": "–°–≥–ª–∞–∂–∏–≤–∞–π –∞–≥—Ä–µ—Å—Å–∏—é —é–º–æ—Ä–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤.",
                "neutral": "–ù–µ –ø–æ–¥–¥–∞–≤–∞–π—Å—è –Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏, –æ—Ç–≤–µ—á–∞–π —Å–ø–æ–∫–æ–π–Ω–æ."
            },
            "ironic": {
                "toxic": "–ò—Ä–æ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –∏—Ä–æ–Ω–∏–∏. –ë—É–¥—å –µ—â–µ –±–æ–ª–µ–µ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º.",
                "friendly": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ª–µ–≥–∫—É—é –∏—Ä–æ–Ω–∏—é, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
                "neutral": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∏—Ä–æ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤."
            },
            "emotional": {
                "toxic": "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ –∂–µ. '–í–∞—É, –∫–∞–∫–∞—è –≥–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å!'",
                "friendly": "–†–∞–∑–¥–µ–ª—è–π —ç–º–æ—Ü–∏–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —ç–Ω—Ç—É–∑–∏–∞–∑–º.",
                "neutral": "–£–º–µ—Ä–µ–Ω–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
            },
            "neutral": {
                "toxic": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å - –∏—â–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –±–µ–π —Ç–æ—á–µ—á–Ω–æ.",
                "friendly": "–û–±—ã—á–Ω—ã–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å.",
                "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π."
            }
        }
        
        return {
            "instruction": adaptations.get(user_style, {}).get(bot_personality, "–û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞."),
            "style": user_style,
            "personality": bot_personality
        }
    
    def analyze_conversation_dynamics(self, messages: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        if not messages:
            return {}
        
        styles_over_time = []
        aggression_trend = []
        engagement_trend = []
        
        for msg in messages:
            text = msg.get("text", "")
            if text:
                style_metrics = self.analyze_message_style(text)
                dominant_style = self.get_dominant_style(style_metrics)
                
                styles_over_time.append(dominant_style)
                aggression_trend.append(style_metrics.get("aggressive", 0))
                engagement_trend.append(style_metrics.get("words", 0))
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        style_changes = len(set(styles_over_time))
        avg_aggression = sum(aggression_trend) / max(1, len(aggression_trend))
        avg_engagement = sum(engagement_trend) / max(1, len(engagement_trend))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if len(messages) < 3:
            conversation_phase = "beginning"
        elif avg_aggression > 1:
            conversation_phase = "heated"
        elif style_changes > 3:
            conversation_phase = "dynamic"
        else:
            conversation_phase = "stable"
        
        return {
            "styles_sequence": styles_over_time,
            "style_diversity": style_changes,
            "avg_aggression": avg_aggression,
            "avg_engagement": avg_engagement,
            "conversation_phase": conversation_phase,
            "dominant_style": max(set(styles_over_time), key=styles_over_time.count) if styles_over_time else "neutral"
        }
    
    def get_response_strategy(self, user_messages: List[str], bot_personality: str = "toxic") -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        if not user_messages:
            return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_styles = []
        for msg in user_messages[-5:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            style_metrics = self.analyze_message_style(msg)
            style = self.get_dominant_style(style_metrics)
            recent_styles.append(style)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        if len(set(recent_styles)) == 1:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–±–∏–ª–µ–Ω –≤ —Å—Ç–∏–ª–µ
            stable_style = recent_styles[0]
            adaptation = self.generate_style_adaptation(stable_style, bot_personality)
            return f"–°–¢–ê–ë–ò–õ–¨–ù–´–ô –°–¢–ò–õ–¨ ({stable_style}): {adaptation['instruction']}"
        
        elif "aggressive" in recent_styles[-2:]:
            # –ù–µ–¥–∞–≤–Ω—è—è –∞–≥—Ä–µ—Å—Å–∏—è
            if bot_personality == "toxic":
                return "–ê–ì–†–ï–°–°–ò–Ø –î–ï–¢–ï–ö–¢–ï–î: –≠—Å–∫–∞–ª–∏—Ä—É–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –Ω–æ —É–º–Ω–æ. –ù–µ –æ–ø—É—Å–∫–∞–π—Å—è –¥–æ –º–∞—Ç–∞, –±–µ–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
            else:
                return "–ê–ì–†–ï–°–°–ò–Ø –î–ï–¢–ï–ö–¢–ï–î: –°–≥–ª–∞–∂–∏–≤–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤."
        
        elif len(set(recent_styles)) > 3:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏
            return "–•–ê–û–¢–ò–ß–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç, –±—É–¥—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º."
        
        else:
            # –û–±—ã—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
            last_style = recent_styles[-1] if recent_styles else "neutral"
            adaptation = self.generate_style_adaptation(last_style, bot_personality)
            return f"–ê–î–ê–ü–¢–ê–¶–ò–Ø –ö –°–¢–ò–õ–Æ: {adaptation['instruction']}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
style_analyzer = StyleAnalyzer()

def analyze_user_style(messages: List[str]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    return style_analyzer.analyze_conversation_dynamics([{"text": msg} for msg in messages])

def get_style_adaptation_prompt(user_messages: List[str], bot_personality: str = "toxic") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª—è –±–æ—Ç–∞."""
    return style_analyzer.get_response_strategy(user_messages, bot_personality)