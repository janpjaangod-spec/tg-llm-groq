#!/usr/bin/env python3
"""
Telegram Bot –õ–µ—Ö–∞ - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import sys
from contextlib import suppress
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    BotCommand,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeDefault,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllPrivateChats,
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from bot_groq.config import settings
from bot_groq.services import initialize_database
from bot_groq.services.database import db_get_settings, db_set_model
from bot_groq.handlers import routers
from bot_groq.tasks.idle_chime import idle_chime_worker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def create_bot() -> Bot:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    return Bot(
        token=settings.telegram_token,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
            link_preview_is_disabled=True
        )
    )

def create_dispatcher() -> Dispatcher:
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for router in routers:
        dp.include_router(router)
    
    return dp

async def startup_message(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∞–º."""
    try:
        bot_info = await bot.get_me()
        startup_text = (
            f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
            f"üë§ –ò–º—è: {bot_info.first_name}\n"
            f"üÜî ID: {bot_info.id}\n"
            f"üìù Username: @{bot_info.username}\n"
            f"‚öôÔ∏è –†–µ–∂–∏–º: {'DEBUG' if settings.debug else 'PRODUCTION'}\n"
            f"üìä Groq –º–æ–¥–µ–ª—å: {settings.groq_model}\n"
            f"üé≤ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: {settings.response_chance}%"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in settings.admin_ids:
            try:
                await bot.send_message(admin_id, startup_text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def shutdown_message(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞–º."""
    try:
        shutdown_text = "üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É..."
        
        for admin_id in settings.admin_ids:
            try:
                await bot.send_message(admin_id, shutdown_text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

_bg_tasks = []  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏

async def on_startup(bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        initialize_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç: @{bot_info.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        raise
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ ENV —Å –º–æ–¥–µ–ª—å—é –≤ –ë–î (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª GROQ_MODEL)
    try:
        db_cfg = db_get_settings()
        if db_cfg.get("model") != settings.groq_model:
            db_set_model(settings.groq_model)
            logger.info(f"üîÅ –û–±–Ω–æ–≤–∏–ª –º–æ–¥–µ–ª—å –≤ –ë–î: {db_cfg.get('model')} -> {settings.groq_model}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await startup_message(bot)

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ scope) ===
    try:
        user_commands = [
            BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="info", description="–û –±–æ—Ç–µ"),
            BotCommand(command="me", description="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(command="mood", description="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
            BotCommand(command="ask", description="–í–æ–ø—Ä–æ—Å –ø–æ –¥–µ–ª—É"),
            BotCommand(command="random", description="–°–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞"),
            BotCommand(command="stats", description="–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="roast", description="–£–Ω–∏—á—Ç–æ–∂—å –º–µ–Ω—è"),
            BotCommand(command="compliment", description="–Ø–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"),
            BotCommand(command="fortune", description="–ú—Ä–∞—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"),
            BotCommand(command="bad_advice", description="–í—Ä–µ–¥–Ω—ã–π —Å–æ–≤–µ—Ç"),
            BotCommand(command="settings", description="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        ]
        admin_commands = user_commands + [
            BotCommand(command="who", description="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand(command="set_mode", description="–†–µ–∂–∏–º –±–æ—Ç–∞"),
            BotCommand(command="clear_history", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
            BotCommand(command="export_data", description="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            BotCommand(command="global_stats", description="–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
            BotCommand(command="reload_settings", description="Reload ENV"),
            BotCommand(command="prompt", description="–ü—Ä–æ–º–ø—Ç"),
            BotCommand(command="forget_user", description="–ó–∞–±—ã—Ç—å —é–∑–µ—Ä–∞"),
            BotCommand(command="set", description="Set var"),
            BotCommand(command="get", description="Get var"),
            BotCommand(command="vars", description="List vars"),
            BotCommand(command="unset", description="Del var"),
            BotCommand(command="admin_help", description="–ê–¥–º–∏–Ω —Å–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="model", description="–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"),
            BotCommand(command="models", description="–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"),
        ]
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö scope
        for scope in (BotCommandScopeAllPrivateChats(), BotCommandScopeAllGroupChats(), BotCommandScopeAllChatAdministrators()):
            with suppress(Exception):
                await bot.delete_my_commands(scope=scope)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ
        # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –∞–¥–º–∏–Ω—ã —Ç–æ–∂–µ —É–≤–∏–¥—è—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ Telegram –Ω–µ —É–º–µ–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ user_id –≤ scope.
        # –ü–æ—ç—Ç–æ–º—É –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º user_commands (–∫–∞–∫ –±–∞–∑—É), –∞ admin —Å–≤–æ–∏ —É–≤–∏–¥—è—Ç –≤ –º–µ–Ω—é administrators.
        await bot.set_my_commands(user_commands, scope=BotCommandScopeAllPrivateChats())
        await bot.set_my_commands(user_commands, scope=BotCommandScopeAllGroupChats())
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeAllChatAdministrators())
        # –ò –¥—É–±–ª–∏—Ä—É–µ–º –∫–∞–∫ default (–Ω–∞ —Å–ª—É—á–∞–π –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ default)
        await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    try:
        task = asyncio.create_task(idle_chime_worker(bot))
        _bg_tasks.append(task)
        logger.info("‚ñ∂Ô∏è idle_chime_worker started")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å idle_chime_worker: {e}")

    logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def on_shutdown(bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for t in _bg_tasks:
        try:
            t.cancel()
        except Exception:
            pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await shutdown_message(bot)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    
    logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.telegram_token:
        import os
        checked = {k: os.getenv(k) for k in ["BOT_TOKEN", "TELEGRAM_BOT_TOKEN", "TELEGRAM_TOKEN"]}
        masked = {k: (v[:6] + "..." + v[-4:] if v and len(v) > 12 else v) for k, v in checked.items()}
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –û–∂–∏–¥–∞–ª–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN / TELEGRAM_BOT_TOKEN / TELEGRAM_TOKEN")
        logger.error(f"üîé –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {masked}")
        sys.exit(1)
    
    if not settings.groq_api_key:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω GROQ_API_KEY!")
        sys.exit(1)
    
    if not settings.admin_ids:
        logger.warning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã ADMIN_IDS! –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = create_bot()
    dp = create_dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

if __name__ == "__main__":
    try:
        # –î–ª—è Windows —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if sys.platform.startswith('win'):
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)
